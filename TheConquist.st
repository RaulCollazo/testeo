Object subclass: #Casilla	instanceVariableNames: 'morph color tema filaCasilla columnaCasilla labelMorph'	classVariableNames: ''	package: 'TheConquist'!!Casilla methodsFor: 'accessing' stamp: '1/24/2025 14:47'!morph	^ morph! !!Casilla methodsFor: 'accessing' stamp: '1/24/2025 14:47'!morph: anObject	morph := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!color	^ color! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!color: anObject	color := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!tema	^ tema! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!tema: anObject	tema := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!filaCasilla	^ filaCasilla! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!filaCasilla: anObject	filaCasilla := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!columnaCasilla	^ columnaCasilla! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!columnaCasilla: anObject	columnaCasilla := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/9/2025 03:59'!labelMorph	^ labelMorph! !!Casilla methodsFor: 'accessing' stamp: '2/9/2025 03:59'!labelMorph: anObject	labelMorph := anObject! !!Casilla methodsFor: 'Crear Casillas y funciones de' stamp: '2/9/2025 03:59'!crearCasilla: x and: y label: label|buttonMorph|labelMorph:= label.filaCasilla:=x. columnaCasilla := y.buttonMorph := Morph new.buttonMorph bounds: (25@25 extent: 125@125).buttonMorph color: Color random.buttonMorph borderWidth: 2.buttonMorph borderColor: Color black.buttonMorph on: #mouseUp send: #botonClickeado to: self.labelMorph := StringMorph new.labelMorph contents: label.self tema: label.labelMorph position: (buttonMorph bounds center - (labelMorph extent / 2))."Agregar la etiqueta al botón"buttonMorph addMorph: labelMorph.self morph: buttonMorph.self morph: buttonMorph.! !!Casilla methodsFor: 'Crear Casillas y funciones de' stamp: '2/16/2025 03:40'!botonClickeado||(Juego jugadordelTurnoActualClase nPC) ifFalse:[Duelo temaDuelo: self tema.       self respuestaClick:( Juego jugadaVálida: (Juego cantNPCClase) nombreJugador: (Juego jugadordelTurnoActualClase ) labelMorph: self).].! !!Casilla methodsFor: 'Crear Casillas y funciones de' stamp: '2/9/2025 01:56'!respuestaClick: argumentoargumento ifTrue:[self SosElMismo: self] ifFalse: [ UIManager default inform: 'Movimiento no válido' ].! !!Casilla methodsFor: 'Crear Casillas y funciones de' stamp: '2/15/2025 06:57'!SosElMismo: Casillalocal(Casillalocal tema) = (Juego jugadordelTurnoActualClase tema) ifTrue: [UIManager default inform: 'No puedes desafiarte a ti mismo...'] ifFalse: [ UIManager default inform:'Dueloo'. Duelo iniciarDuelo. ]! !Object subclass: #Juego	instanceVariableNames: 'CantNPC CantJugadores PantallaActual imagenMorph turnoActual jugadorActual juegoActivo'	classVariableNames: ''	package: 'TheConquist'!!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantNPC	^ CantNPC! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantNPC: anObject	CantNPC := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantJugadores	^ CantJugadores! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantJugadores: anObject	CantJugadores := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!pantallaActual	^ PantallaActual! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!pantallaActual: anObject	PantallaActual := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 21:41'!imagenMorph	^ imagenMorph! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 21:41'!imagenMorph: anObject	imagenMorph := anObject! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 14:17'!turnoActual ^turnoActual.! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 14:15'!turnoActual: anObject	turnoActual := anObject! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 15:29'!jugadorActual	^ jugadorActual! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 15:29'!jugadorActual: anObject	jugadorActual := anObject! !!Juego methodsFor: 'accessing' stamp: '2/13/2025 22:50'!juegoActivo	^ juegoActivo! !!Juego methodsFor: 'accessing' stamp: '2/13/2025 23:03'!juegoActivo: anObject	juegoActivo := anObject! !!Juego methodsFor: 'initialization' stamp: '2/13/2025 23:19'!initializePantallaActual := 0.turnoActual := 0.juegoActivo := 0.! !!Juego methodsFor: 'ManageJuego' stamp: '1/23/2025 16:32'!borrarVentanasLabeledParticular SystemWindow allInstances do: [ :each |         (each label = 'TheConquist') ifTrue: [            each close. "Cierra la ventana"        ].    ].! !!Juego methodsFor: 'ManageJuego'!dibujarFondo	| tmp1 tmp2 tmp3 tmp4 tmp6 |	tmp1 := Form fromFileNamed:		        FileSystem workingDirectory		        / 'assets/backgrounds/background.png'.	imagenMorph := ImageMorph new.	imagenMorph		image: tmp1;		position: 0 @ 0.	tmp2 := SimpleButtonMorph new.	tmp2		label: 'Nuevo Juego';		target: self;		actionSelector: #obtenerCantJugadores;		extent: 150 @ 50;		position: imagenMorph width // 2 - (tmp2 width // 2)			@ (imagenMorph height // 2 - (tmp2 height // 2) + 120).	tmp3 := SimpleButtonMorph new.	tmp3		label: 'Salir';		target: self;		actionSelector: #borrarVentanasLabeledParticular;		extent: 120 @ 50;		position: imagenMorph width // 2 - (tmp3 width // 2)			@ (imagenMorph height // 2 - (tmp3 height // 2) + 220).	imagenMorph		addMorph: tmp2;		addMorph: tmp3.	tmp4 := imagenMorph openInWindowLabeled: 'TheConquist'.	[	tmp4 position: 0 @ 0.	tmp6 := World extent.	tmp4		extent: tmp6;		borderWidth: 0 ] ensure: [ tmp4 show ]! !!Juego methodsFor: 'ManageJuego'!dibujarFondoTablero	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |	tmp1 := Form fromFileNamed: FileSystem workingDirectory		        / 'assets/backgrounds/background-table.jpg'.	tmp2 := ImageMorph new.	tmp2		image: tmp1;		position: 0 @ 0.	tmp3 := ScrollPane new.	tmp3 scroller addMorph: tmp2.	tmp3 extent: 300 @ 300.	TableroLogico dibujarTablero: tmp2 cantNPC: CantNPC.	tmp4 := SystemWindow allInstances		        detect: [ :arg1 | arg1 label = 'TheConquist' ]		        ifNone: [  ].	tmp4 ifNotNil: [ tmp4 close ].	tmp6 := World extent.	tmp5 := tmp3 openInWindowLabeled: 'TheConquist Board'.	[	tmp5		position: 0 @ 0;		extent: tmp6;		borderWidth: 0 ] ensure: [ tmp5 show ]! !!Juego methodsFor: 'ManageJuego' stamp: '1/22/2025 05:28'!eliminarMorphsWorld submorphs "Selecciona a todos los submorphs y descide si es un ImageMorph para eliminarlo"        select: [ :morph | morph isKindOf: ImageMorph ]        thenDo: [ :morph | morph delete ].! !!Juego methodsFor: 'ManageJuego' stamp: '1/21/2025 22:43'!nuevoJuegoTranscript show: ['Nuevo juego'].! !!Juego methodsFor: 'ManageJuego' stamp: '2/13/2025 23:34'!obtenerCantJugadores    | flag MatrizTemas|    flag := false.    "Solicitar la cantidad de NPCs"    [ flag not ] whileTrue: [        CantNPC := (UIManager default request: '¿Cuántos participantes hay?') asNumber.        ((CantNPC sqrt isInteger))             ifTrue: [ flag := true ]            ifFalse: [ UIManager default inform: 'Valor inválido' ].    ].self class cantNPCClase: CantNPC.    "Solicitar la cantidad de jugadores humanos"    CantJugadores := (UIManager default request: '¿Cuántos participantes humanos habrá?') asNumber.MatrizTemas := TableroLogico crearMatrizTemas: CantNPC.TableroLogico crearMatrizTablero: CantNPC NPCs: CantJugadores.TableroLogico crearMatrizMorphs: CantNPC.self dibujarFondoTablero.self flujoPrincipalTableroYaCreado.! !!Juego methodsFor: 'ManageJuego' stamp: '2/16/2025 08:05'!flujoPrincipalTableroYaCreado		(UIManager default confirm: 'Turno Actual: ', turnoActual asString ) ifTrue:[		turnoActual := turnoActual  + 1 .        self turnoActualmente.        self obtenerJugadorActual.        self esJugadorBot.] ifFalse:[].! !!Juego methodsFor: 'ManageJuego' stamp: '2/14/2025 03:05'!ganaDesafiante: arg1 desafiado: arg2	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 fila columna |	tmp4 := self cantNPC sqrt ceiling.	tmp5 := self cantNPC sqrt ceiling.	tmp1 := 1.	tmp2 := 1.	tmp3 := nil.	tmp6 := self cantNPC.	tmp7 := tmp6.	tmp8 := tmp7.	1 to: tmp8 do: [ :tmp9 |		(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema		= arg1 tema ifTrue: [			tmp3 := TableroLogico matrizDeMorphs at: tmp1 column: tmp2 ].		tmp1 := tmp1 + 1.		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ] ].	1.	tmp1 := 1.	tmp2 := 1.	tmp6 := self cantNPC.	tmp7 := tmp6.	tmp8 := tmp7.	1 to: tmp8 do: [ :tmp9 |		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ].		(TableroLogico matrizDeTemas at: tmp1 column: tmp2) = arg2 tema			ifTrue: [				TableroLogico matrizDeTemas at: tmp1 column: tmp2 put: arg1 tema.				(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema				= arg2 tema ifTrue: [					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema:						arg1 tema.					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) morph						color: tmp3 morph color.					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) labelMorph						contents: arg1 tema ] ].		tmp1 := tmp1 + 1.		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ] ].	1.	UIManager default inform:		'Ganó: ' , arg1 nombre , ' ' , 'tema: ' , arg1 tema.	Transcript clear.	Transcript show: ('ganó:', arg1 tema, ' ', arg1 nPC asString, ' ', 'Perdió:', ' ', arg2 tema, ' ', arg2 nPC asString).	fila := 1.	columna := 1.	1 to: self cantNPC do: [ :i |		(fila > self cantNPC sqrt ceiling) ifTrue: [ fila := 1. columna := columna + 1 ].		((TableroLogico matrizTableroLógico at: fila column: columna) nombre = arg2 nombre) ifTrue: [			TableroLogico matrizTableroLógico at: fila column: columna put: arg1		].		fila := fila + 1.	].! !!Juego methodsFor: 'ManageJuego' stamp: '2/16/2025 09:48'!simularDuelo	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp10 tmp12 tmp13 tmp15 |	tmp1 := OrderedCollection new.	tmp2 := self cantNPC sqrt ceiling.	tmp3 := self cantNPC sqrt ceiling.	tmp4 := self cantNPC.	tmp5 := tmp4.	tmp6 := OrderedCollection new.	tmp10 := tmp5.	1 to: tmp10 do: [ :tmp11 |		tmp12 := tmp11 - 1 // tmp3 + 1.		tmp13 := tmp11 - 1 \\ tmp3 + 1.		(TableroLogico matrizDeTemas at: tmp12 column: tmp13)		= jugadorActual tema ifTrue: [			tmp12 > 1 ifTrue: [ tmp6 add: tmp12 - 1 @ tmp13 ].			tmp12 < tmp2 ifTrue: [ tmp6 add: tmp12 + 1 @ tmp13 ].			tmp13 > 1 ifTrue: [ tmp6 add: tmp12 @ (tmp13 - 1) ].			tmp13 < tmp3 ifTrue: [ tmp6 add: tmp12 @ (tmp13 + 1) ] ] ].	1.	tmp6 do: [ :arg1 |		tmp12 := arg1 x.		tmp13 := arg1 y.		(TableroLogico matrizDeTemas at: tmp12 column: tmp13)		~= jugadorActual tema ifTrue: [ tmp1 add: tmp12 @ tmp13 ] ].	tmp15 := tmp1 atRandom.	tmp8 := tmp15		        ifNil: [ ^ self flujoPrincipalTableroYaCreado ]		        ifNotNil: [ tmp15 ].	[	tmp7 := TableroLogico matrizTableroLógico at: tmp8 x column: tmp8 y.	tmp7 tema = jugadorActual tema and: [ tmp1 size > 1 ] ] whileTrue: [		| tmp17 |		tmp1 remove: tmp8.		tmp17 := tmp1 atRandom.		tmp8 := tmp17			        ifNil: [ ^ self flujoPrincipalTableroYaCreado ]			        ifNotNil: [ tmp17 ] ].	tmp12 := tmp8 x.	tmp13 := tmp8 y.	tmp7 := TableroLogico matrizTableroLógico at: tmp12 column: tmp13.	tmp7 nPC		ifTrue: [			Transcript show: 'Duelo de bot - bot'.			Random new next < 0.5				ifTrue: [ self ganaDesafiante: jugadorActual desafiado: tmp7 ]				ifFalse: [ self ganaDesafiante: tmp7 desafiado: jugadorActual ] ]		ifFalse: [ Duelo dueloBotNPC: jugadorActual desafiado:tmp7 ].	self flujoPrincipalTableroYaCreado! !!Juego methodsFor: 'ManageJuego' stamp: '2/16/2025 08:06'!jugadorPersonaActiva"UIManager default confirm: 'Hola'."! !!Juego methodsFor: 'removing' stamp: '2/9/2025 03:14'!removeButtonMorphs    "Elimina todos los ButtonMorphs de la variable de instancia imagenMorph"    imagenMorph := nil.! !!Juego methodsFor: 'removing' stamp: '2/9/2025 03:43'!removeAllMorphsFromImageMorphExceptBackground    "Elimina todos los morphs añadidos a imagenMorph excepto el background"    imagenMorph submorphs do: [:each |         (each isKindOf: ImageMorph) ifFalse: [ imagenMorph removeMorph: each ]    ].! !!Juego methodsFor: 'Accesorios' stamp: '2/14/2025 00:53'!esJugadorBot(self jugadorActual nPC) ifTrue: [ self simularDuelo ] ifFalse: [self jugadorPersonaActiva.].! !!Juego methodsFor: 'Accesorios' stamp: '2/16/2025 05:13'!obtenerJugadorActualself jugadorActual: (TableroLogico obtenerJugadorTurnoActual: self cantNPC).self class jugadordelTurnoActualClase: self jugadorActual.UIManager default inform: (('Jugador actual: '),  jugadorActual nombre,' ', 'Tema: ', jugadorActual tema).Duelo cantidadDuelo: self cantNPC.! !!Juego methodsFor: 'Accesorios' stamp: '2/14/2025 00:48'!turnoActualmente(turnoActual = 0 ) ifTrue: [ UIManager default inform: 'Primer Turno...Buscando primer Jugador' ] ifFalse: [ UIManager default inform: ('Turno número: ', (turnoActual asString)). ]! !!Juego methodsFor: 'as yet unclassified' stamp: '2/14/2025 02:29'!verificarContinuidad    | fila columna primer nombreDiferente encontrado |    primer := (TableroLogico matrizTableroLógico at: self cantNPC sqrt ceiling column: self cantNPC sqrt ceiling) nombre.    fila := 1.    columna := 1.    encontrado := false.    1 to: self cantNPC do: [ :i |        (fila > self cantNPC sqrt ceiling) ifTrue: [             fila := 1.             columna := columna + 1.        ].                nombreDiferente := (TableroLogico matrizTableroLógico at: fila column: columna) nombre.                (nombreDiferente ~= primer) ifTrue: [             encontrado := true.        ].        fila := fila + 1.    ].    ^ encontrado. "Retorna true si encontró al menos un nombre diferente, de lo contrario false"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: 'desafiante desafiado cantNPCClase jugadordelTurnoActualClase instancia'!!Juego class methodsFor: 'as yet unclassified' stamp: '2/15/2025 06:56'!iniciarinstancia := self new. "Crea una instancia de Juego"instancia dibujarFondo. "Llama al método obtenerCantJug y devuelve su resultado"! !!Juego class methodsFor: 'as yet unclassified' stamp: '2/14/2025 02:44'!jugadaVálida: cantNPC nombreJugador: nombreJugador labelMorph: casilla    | fila columna listaDeFilasValidas listatema maxFila maxColumna |    listaDeFilasValidas := OrderedCollection new.    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.    1 to: cantNPC do: [ :i |        fila := (i - 1) // maxColumna + 1.        columna := (i - 1) \\ maxColumna + 1.        "Verifica si el tema del jugador coincide en la posición actual"        ((TableroLogico matrizDeTemas at: fila column: columna) = nombreJugador tema ) ifTrue: [            "Agrega las posiciones válidas en base a la posición actual"            (fila = 1 and: columna = 1) ifTrue: [                listaDeFilasValidas add: 2@1.                listaDeFilasValidas add: 1@2.            ].            (fila = 1 and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: 1@(maxColumna - 1).                listaDeFilasValidas add: 2@maxColumna.            ].            (fila = maxFila and: columna = 1) ifTrue: [                listaDeFilasValidas add: (maxFila - 1)@1.                listaDeFilasValidas add: maxFila@2.            ].            (fila = maxFila and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: maxFila@(maxColumna - 1).                listaDeFilasValidas add: (maxFila - 1)@maxColumna.            ].            (fila = 1 and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: 1@(columna - 1).                listaDeFilasValidas add: 1@(columna + 1).                listaDeFilasValidas add: 2@columna.            ].            (fila = maxFila and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: maxFila@(columna - 1).                listaDeFilasValidas add: maxFila@(columna + 1).                listaDeFilasValidas add: (maxFila - 1)@columna.            ].            (columna = 1 and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@1.                listaDeFilasValidas add: (fila + 1)@1.                listaDeFilasValidas add: fila@2.            ].            (columna = maxColumna and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@maxColumna.                listaDeFilasValidas add: (fila + 1)@maxColumna.                listaDeFilasValidas add: fila@(maxColumna - 1).            ].            ((1 < fila and: fila < maxFila) and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@columna.                listaDeFilasValidas add: (fila + 1)@columna.                listaDeFilasValidas add: fila@(columna - 1).                listaDeFilasValidas add: fila@(columna + 1).            ].        ].    ].    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.(listaDeFilasValidas includes: ((casilla filaCasilla)@(casilla columnaCasilla)) )ifTrue: [^true] ifFalse: [ ^false].! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiante	^ desafiante! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiante: anObject	desafiante := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiado	^ desafiado! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiado: anObject	desafiado := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!cantNPCClase	^ cantNPCClase! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!cantNPCClase: anObject	cantNPCClase := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!jugadordelTurnoActualClase	^ jugadordelTurnoActualClase! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!jugadordelTurnoActualClase: anObject	jugadordelTurnoActualClase := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/15/2025 06:55'!instancia	^ instancia! !!Juego class methodsFor: 'accessing' stamp: '2/15/2025 06:55'!instancia: anObject	instancia := anObject! !Juego subclass: #Duelo	instanceVariableNames: ''	classVariableNames: ''	package: 'TheConquist'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Duelo class	instanceVariableNames: 'temaDuelo desafianteDuelo desafiadoDuelo tableroDeDuelo morphnombre1 morphnombre2 morphTiempo1 morphTiempo2 puntosDesafiado puntosDesafiante puntosMorph1 puntosMorph2 morphImagen listaNombres nombreDelaImagen jugadorActual tiempoDesafiante tiempoDesafiado temaGanador cantidadDuelo jugadorGanador jugadorPerdedor listaparabots jugandocontrabot'!!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 06:52'!desafianteDuelo	^ desafianteDuelo! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 06:52'!desafianteDuelo: anObject	desafianteDuelo := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 06:52'!desafiadoDuelo	^ desafiadoDuelo! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 06:52'!desafiadoDuelo: anObject	desafiadoDuelo := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 15:53'!tableroDeDuelo	^ tableroDeDuelo! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 15:53'!tableroDeDuelo: anObject	tableroDeDuelo := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 16:34'!morphnombre1	^ morphnombre1! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 16:34'!morphnombre1: anObject	morphnombre1 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 16:34'!morphnombre2	^ morphnombre2! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 16:34'!morphnombre2: anObject	morphnombre2 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:15'!morphTiempo1	^ morphTiempo1! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:15'!morphTiempo1: anObject	morphTiempo1 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:15'!morphTiempo2	^ morphTiempo2! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:15'!morphTiempo2: anObject	morphTiempo2 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosDesafiado	^ puntosDesafiado! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosDesafiado: anObject	puntosDesafiado := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosDesafiante	^ puntosDesafiante! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosDesafiante: anObject	puntosDesafiante := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosMorph1	^ puntosMorph1! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosMorph1: anObject	puntosMorph1 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosMorph2	^ puntosMorph2! !!Duelo class methodsFor: 'accessing' stamp: '2/15/2025 18:33'!puntosMorph2: anObject	puntosMorph2 := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!morphImagen	^ morphImagen! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!morphImagen: anObject	morphImagen := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!listaNombres	^ listaNombres! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!listaNombres: anObject	listaNombres := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!nombreDelaImagen	^ nombreDelaImagen! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:14'!nombreDelaImagen: anObject	nombreDelaImagen := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:22'!jugadorActual	^ jugadorActual! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:22'!jugadorActual: anObject	jugadorActual := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:27'!tiempoDesafiante	^ tiempoDesafiante! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:27'!tiempoDesafiante: anObject	tiempoDesafiante := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:27'!tiempoDesafiado	^ tiempoDesafiado! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 00:27'!tiempoDesafiado: anObject	tiempoDesafiado := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 03:33'!temaDuelo	^ temaDuelo! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 03:33'!temaDuelo: anObject	temaDuelo := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 04:25'!temaGanador	^ temaGanador! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 04:25'!temaGanador: anObject	temaGanador := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:06'!cantidad	^ cantidad! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:06'!cantidad: anObject	cantidad := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:09'!cantidadDuelo	^ cantidadDuelo! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:09'!cantidadDuelo: anObject	cantidadDuelo := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:23'!jugadorGanador	^ jugadorGanador! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:23'!jugadorGanador: anObject	jugadorGanador := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:23'!jugadorPerdedor	^ jugadorPerdedor! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 05:23'!jugadorPerdedor: anObject	jugadorPerdedor := anObject! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 10:07'!listaparabots	^ listaparabots! !!Duelo class methodsFor: 'accessing' stamp: '2/16/2025 10:07'!listaparabots: anObject	listaparabots := anObject! !!Duelo class methodsFor: 'class initialization' stamp: '2/16/2025 08:07'!initialize puntosDesafiado := 0.puntosDesafiante :=0.tiempoDesafiante := 60.tiempoDesafiado := 60.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:20'!botonclickeado: parametro(parametro = self nombreDelaImagen) ifTrue: [	(jugadorActual = true) ifTrue: [  Transcript show: 'correcto'.self incrementarPuntosMorph1.] ifFalse: [Transcript show: 'correcto'.self incrementarPuntosMorph2.]] ifFalse: [ (jugadorActual = true) ifTrue: [self penalizaciónTiempo1] ifFalse: [self penalizaciónTiempo2 ]]! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 04:28'!controlDeTiempos    | procesoDesafiante procesoDesafiado detener  |    detener := false.     procesoDesafiante := [        [self jugadorActual and: [detener not]] whileTrue: [            (self tiempoDesafiante > 0) ifTrue: [                1 second wait.                self tiempoDesafiante: self tiempoDesafiante - 1.                self decrementarTiempo1.            ].            (self tiempoDesafiante <= 0) ifTrue: [                jugadorActual := false.                detener := true.((self tiempoDesafiado = 0) and: (self tiempoDesafiante = 0)) ifTrue:[self determinarGanador]. ((self tiempoDesafiado > 0) xor: (self tiempoDesafiante > 0)) ifTrue:[self controlDeTiempos].            ].        ].    ] fork.    procesoDesafiado := [        [(self jugadorActual not) and: [detener not]] whileTrue: [            (self tiempoDesafiado > 0) ifTrue: [                1 second wait.                self tiempoDesafiado: self tiempoDesafiado - 1.                self decrementarTiempo2.            ].            (self tiempoDesafiado <= 0) ifTrue: [                jugadorActual := true.                detener := true.((self tiempoDesafiado = 0) and: (self tiempoDesafiante = 0)) ifTrue:[self determinarGanador]. ((self tiempoDesafiado > 0) xor: (self tiempoDesafiante > 0)) ifTrue:[self controlDeTiempos].            ].        ].    ] fork.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 13:49'!crearBotones	| boton1 boton2 boton3 boton4 boton5 coleccionBotones listaParaCargarBotones |listaParaCargarBotones := OrderedCollection new.listaParaCargarBotones add: nombreDelaImagen.1 to: 3 do: [:i|listaParaCargarBotones add: (listaNombres at: i ).].listaParaCargarBotones shuffle.	boton1 := SimpleButtonMorph new.	boton1		label: (listaParaCargarBotones at: 1);		extent: 200 @ 100;		on: #mouseUp send: #value to: [self botonclickeado: (listaParaCargarBotones at: 1)];		position: 0 @ 0.	boton2 := SimpleButtonMorph new.	boton2		label: (listaParaCargarBotones at: 2);		extent: 200 @ 100;		on: #mouseUp send: #value to: [self botonclickeado: (listaParaCargarBotones at: 2)];		position: 0 @ 150.	boton3 := SimpleButtonMorph new.	boton3		label: (listaParaCargarBotones at: 3);		extent: 200 @ 100;		on: #mouseUp send: #value to: [self botonclickeado: (listaParaCargarBotones at: 3)];		position: 300 @ 0.	boton4 := SimpleButtonMorph new.	boton4		label: (listaParaCargarBotones at: 4);		extent: 200 @ 100;		on: #mouseUp send: #value to: [self botonclickeado: (listaParaCargarBotones at: 4)];		position: 300 @ 150.		boton5 := SimpleButtonMorph new.	boton5		label: ('Saltar');		extent: 200 @ 100;		on: #mouseUp send: #value to: [ jugadorActual := jugadorActual not. jugadorActual inspect. self controlDeTiempos.1 second wait.(jugadorActual ) ifTrue:[self jugadaBot] ];		position: 600 @ 150.	coleccionBotones := Morph new.	coleccionBotones 		addMorph: boton1 ;		addMorph: boton2 ;		addMorph: boton3 ;		addMorph: boton4 ;		addMorph: boton5.coleccionBotones position: (tableroDeDuelo extent x //2 ) - coleccionBotones extent x - 250	@ (tableroDeDuelo extent y //2 ) - coleccionBotones extent y.tableroDeDuelo addMorph: coleccionBotones.listaparabots := listaParaCargarBotones.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 00:18'!crearMorphNombres: desafianteNombre desafiadoNombre: desafiadoNombre    | text1 text2 morph1position morph2position font textMorph1 textMorph2|font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Crear el Morph para contener el texto del desafianteNombre"    morphnombre1 := Morph new.    morphnombre1 extent: 200 @ 75.    morphnombre1 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text1 := desafianteNombre asUppercase asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph1 := TextMorph new.textMorph1 contents: text1. textMorph1 position: ((morphnombre1 extent - textMorph1 extent) // 2).    morphnombre1 addMorph: textMorph1.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: morphnombre1.        "Posicionar el morphnombre1 en la posición deseada"    morph1position := ((tableroDeDuelo extent x)) - (World width) @ ((tableroDeDuelo extent y //2 )) - (World height //2 ).    morphnombre1 position: morph1position.    "Crear el Morph para contener el texto del desafianteNombre"    morphnombre2 := Morph new.    morphnombre2 extent: 200 @ 75.    morphnombre2 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text2 := desafiadoNombre asUppercase asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph2 := TextMorph new.textMorph2 contents: text2. textMorph2 position: ((morphnombre1 extent - textMorph2 extent) // 2).    morphnombre2 addMorph: textMorph2.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: morphnombre2.        "Posicionar el morphnombre1 en la posición deseada"    morph2position := ((tableroDeDuelo extent x //2 )) + (World width // 2) @ ((tableroDeDuelo extent y //2 )) - (World height //2 ) .    morphnombre2 position: morph2position.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 00:33'!crearMorphTimmer: tiempo1 timmer2: tiempo2    | text1 text2 morph1position morph2position font textMorph1 textMorph2 time1 time2|time1 := (tiempoDesafiante) asNumber.time2 := (tiempoDesafiado) asNumber.font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Crear el Morph para contener el texto del desafianteNombre"    morphTiempo1 := Morph new.    morphTiempo1 extent: 200 @ 75.    morphTiempo1 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text1 := (time1 asString) asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph1 := TextMorph new.textMorph1 contents: text1. textMorph1 position: ((morphTiempo1 extent - textMorph1 extent) // 2).    morphTiempo1 addMorph: textMorph1.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: morphTiempo1.        "Posicionar el morphnombre1 en la posición deseada"    morph1position := morphnombre1 position x - 100  @ morphnombre1 position y + 100.    morphTiempo1 position: morph1position.    "Crear el Morph para contener el texto del desafianteNombre"    morphTiempo2 := Morph new.    morphTiempo2 extent: 200 @ 75.    morphTiempo2 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text2 := (time2 asString) asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph2 := TextMorph new.textMorph2 contents: text2. textMorph2 position: ((morphTiempo2 extent - textMorph2 extent) // 2).    morphTiempo2 addMorph: textMorph2.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: morphTiempo2.        "Posicionar el morphnombre1 en la posición deseada"    morph2position := morphnombre2 position x -100 @ morphnombre2 position y + 100.    morphTiempo2 position: morph2position.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 03:37'!crearMorphimagen|imagen directoryPath fileNames nombreimagen screenWidth screenHeight |screenWidth := World width.screenHeight := World height.directoryPath := FileSystem workingDirectory / 'assets/images'/(self temaDuelo)asString.fileNames := OrderedCollection new.directoryPath entries do: [:entry |    entry isDirectory ifFalse: [fileNames add: entry name]].nombreimagen := fileNames atRandom.imagen := Form fromFileNamed:                FileSystem workingDirectory                / 'assets/images'/((self temaDuelo))asString/nombreimagen. morphImagen ifNotNil: [ tableroDeDuelo removeMorph: morphImagen ].morphImagen := ImageMorph new.morphImagen        image: imagen;        position: ((tableroDeDuelo extent x // 2) - (morphImagen width // 2))  @ ((tableroDeDuelo extent y // 2) - (morphImagen height // 2))-100.tableroDeDuelo addMorph: morphImagen.fileNames remove: nombreimagen.listaNombres := fileNames.nombreDelaImagen := nombreimagen.self crearBotones.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 00:57'!crearMorphsPuntos    | text1 text2 morph1position morph2position font textMorph1 textMorph2 puntos1 puntos2|puntos1 := puntosDesafiante asNumber.puntos2 := puntosDesafiado asNumber.font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Crear el Morph para contener el texto del desafianteNombre"    puntosMorph1 := Morph new.    puntosMorph1 extent: 200 @ 75.    puntosMorph1 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text1 := (puntosDesafiante asString) asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph1 := TextMorph new.textMorph1 contents: text1. textMorph1 position: ((puntosMorph1 extent - textMorph1 extent) // 2).    puntosMorph1 addMorph: textMorph1.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: puntosMorph1.        "Posicionar el morphnombre1 en la posición deseada"    morph1position := morphnombre1 position x - 200  @ morphnombre1 position y + 200.    puntosMorph1 position: morph1position.    "Crear el Morph para contener el texto del desafianteNombre"    puntosMorph2 := Morph new.    puntosMorph2 extent: 200 @ 75.    puntosMorph2 color: Color gray.        "Crear el TextMorph para el desafianteNombre"    text2 := (puntosDesafiado asString) asText    addAttribute: font;    addAttribute: (TextColor new color: Color red).    "Centrar el texto dentro del morphnombre1"textMorph2 := TextMorph new.textMorph2 contents: text2. textMorph2 position: ((puntosMorph2 extent - textMorph2 extent) // 2).    puntosMorph2 addMorph: textMorph2.        "Suponiendo que tableroDeDuelo ya está definido como un ImageMorph"    "tableroDeDuelo := ImageMorph new. Esto es solo un placeholder, deberías tener ya tu tablero de duelo definido"        "Agregar morphnombre1 a tableroDeDuelo"    tableroDeDuelo addMorph: puntosMorph2.        "Posicionar el morphnombre1 en la posición deseada"    morph2position := morphnombre2 position x -200   @ morphnombre2 position y + 200.    puntosMorph2 position: morph2position.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:18'!decrementarTiempo1    | nuevoPunto textMorph1 font newText |    font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Incrementar el valor de puntosDesafiante"        "Encontrar el TextMorph dentro de puntosMorph1"    textMorph1 := morphTiempo1 submorphs detect: [:each | each isKindOf: TextMorph].        "Crear el nuevo texto con atributos"    newText := (tiempoDesafiante asString asText).    newText addAttribute: font.    newText addAttribute: (TextColor new color: Color red).        "Actualizar el contenido del TextMorph"    textMorph1 contents: newText.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 02:07'!decrementarTiempo2    | nuevoPunto textMorph1 font newText |    font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Incrementar el valor de puntosDesafiante"        "Encontrar el TextMorph dentro de puntosMorph1"    textMorph1 := morphTiempo2 submorphs detect: [:each | each isKindOf: TextMorph].        "Crear el nuevo texto con atributos"    newText := (tiempoDesafiado asString asText).    newText addAttribute: font.    newText addAttribute: (TextColor new color: Color red).        "Actualizar el contenido del TextMorph"    textMorph1 contents: newText.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 01:51'!dibujarDuelo| imagen barra tamañoWorld ventana  |imagen := Form fromFileNamed: (FileSystem workingDirectory / 'assets' / 'backgrounds' / 'background-duel.jpg') fullName.tableroDeDuelo := ImageMorph new.tableroDeDuelo image: imagen.tableroDeDuelo position: 0@0.barra := ScrollPane new.barra scroller addMorph: tableroDeDuelo.barra extent: 300@300."Set the scroll position to the middle"barra scrollValue: ((0.1)@ (0.2)).tamañoWorld := World extent.ventana := SystemWindow labelled: 'Duelo'.ventana addMorph: barra frame: (0@0 corner: 1@1).[    ventana        position: 0 @ 0;        extent: tamañoWorld;        borderWidth: 0.] ensure: [ ventana openInWorld ].! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 02:44'!incrementarPuntosMorph1    | nuevoPunto textMorph1 font newText |    font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Incrementar el valor de puntosDesafiante"    self puntosDesafiante: (self puntosDesafiante + 1).        "Encontrar el TextMorph dentro de puntosMorph1"    textMorph1 := puntosMorph1 submorphs detect: [:each | each isKindOf: TextMorph].        "Crear el nuevo texto con atributos"    newText := (self puntosDesafiante asString asText).    newText addAttribute: font.    newText addAttribute: (TextColor new color: Color red).        "Actualizar el contenido del TextMorph"    textMorph1 contents: newText.self crearMorphimagen.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 02:45'!incrementarPuntosMorph2    | nuevoPunto textMorph1 font newText |    font := (TextFontReference toFont: (StrikeFont familyName: 'Bitmap DejaVu Sans' size: 150)).    "Incrementar el valor de puntosDesafiante"    self puntosDesafiado: (self puntosDesafiado + 1).        "Encontrar el TextMorph dentro de puntosMorph1"    textMorph1 := puntosMorph2 submorphs detect: [:each | each isKindOf: TextMorph].        "Crear el nuevo texto con atributos"    newText := (self puntosDesafiado asString asText).    newText addAttribute: font.    newText addAttribute: (TextColor new color: Color red).        "Actualizar el contenido del TextMorph"    textMorph1 contents: newText.self crearMorphimagen.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:34'!iniciarDuelo    | jugadorDesafiado fila columna |    fila := 1.    columna := 1.    1 to: cantidadDuelo do: [ :index |         "Iteramos sobre la matriz TableroLogico"        (fila > cantidadDuelo sqrt ceiling) ifTrue: [             fila := 1.             columna := columna + 1         ].        (((TableroLogico matrizTableroLógico at: fila column: columna) tema) = (temaDuelo)) ifTrue: [             jugadorDesafiado := (TableroLogico matrizTableroLógico at: fila column: columna)        ].        fila := fila + 1.    ].self initialize.self jugadorActual: true.self dibujarDuelo.self crearMorphNombres: (Juego jugadordelTurnoActualClase nombre asString) desafiadoNombre: jugadorDesafiado nombre asString. self controlDeTiempos .self crearMorphTimmer: 10 timmer2: 10.self crearMorphsPuntos.self crearMorphimagen.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:13'!determinarGanador    | jugadorDesafiado fila columna |    fila := 1.    columna := 1.    1 to: cantidadDuelo do: [ :index |         "Iteramos sobre la matriz TableroLogico"        (fila > cantidadDuelo sqrt ceiling) ifTrue: [             fila := 1.             columna := columna + 1         ].        (((TableroLogico matrizTableroLógico at: fila column: columna) tema) = (temaDuelo)) ifTrue: [             jugadorDesafiado := (TableroLogico matrizTableroLógico at: fila column: columna)        ].        fila := fila + 1.    ].    (puntosDesafiante > puntosDesafiado) ifTrue: [         self jugadorGanador: Juego jugadordelTurnoActualClase.         self jugadorPerdedor: jugadorDesafiado.    ] ifFalse: [          self jugadorGanador: jugadorDesafiado.         self jugadorPerdedor: Juego jugadordelTurnoActualClase.    ].self eliminarVentanasDuelo.self ganaDesafiante: jugadorGanador desafiado: jugadorPerdedor.Juego instancia flujoPrincipalTableroYaCreado.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:12'!eliminarVentanasDuelo    "Elimina todas las instancias de SystemWindow etiquetadas con 'Duelo'"    SystemWindow allInstances do: [ :cadaVentana |         (cadaVentana label = 'Duelo') ifTrue: [ cadaVentana delete ].    ].! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:38'!penalizaciónTiempo1(tiempoDesafiante := tiempoDesafiante - 10).tiempoDesafiante <0 ifTrue:[ tiempoDesafiante := 1].self decrementarTiempo1.! !!Duelo class methodsFor: 'manageDuelos' stamp: '2/16/2025 08:30'!penalizaciónTiempo2(tiempoDesafiado := tiempoDesafiado - 10).tiempoDesafiado <0 ifTrue:[tiempoDesafiado := 1].self decrementarTiempo2.! !!Duelo class methodsFor: 'ManageJuego' stamp: '2/16/2025 07:51'!ganaDesafiante: arg1 desafiado: arg2	| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 fila columna |	tmp4 := cantidadDuelo sqrt ceiling.	tmp5 := cantidadDuelo sqrt ceiling.	tmp1 := 1.	tmp2 := 1.	tmp3 := nil.	tmp6 := cantidadDuelo.	tmp7 := tmp6.	tmp8 := tmp7.	1 to: tmp8 do: [ :tmp9 |		(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema		= arg1 tema ifTrue: [			tmp3 := TableroLogico matrizDeMorphs at: tmp1 column: tmp2 ].		tmp1 := tmp1 + 1.		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ] ].	1.	tmp1 := 1.	tmp2 := 1.	tmp6 := cantidadDuelo.	tmp7 := tmp6.	tmp8 := tmp7.	1 to: tmp8 do: [ :tmp9 |		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ].		(TableroLogico matrizDeTemas at: tmp1 column: tmp2) = arg2 tema			ifTrue: [				TableroLogico matrizDeTemas at: tmp1 column: tmp2 put: arg1 tema.				(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema				= arg2 tema ifTrue: [					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) tema:						arg1 tema.					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) morph						color: tmp3 morph color.					(TableroLogico matrizDeMorphs at: tmp1 column: tmp2) labelMorph						contents: arg1 tema ] ].		tmp1 := tmp1 + 1.		tmp1 > tmp4 ifTrue: [			tmp1 := 1.			tmp2 := tmp2 + 1 ] ].	1.	UIManager default inform:		'Ganó: ' , arg1 nombre , ' ' , 'tema: ' , arg1 tema.	Transcript clear.	Transcript show: ('ganó:', arg1 tema, ' ', arg1 nPC asString, ' ', 'Perdió:', ' ', arg2 tema, ' ', arg2 nPC asString).	fila := 1.	columna := 1.	1 to: cantidadDuelo do: [ :i |		(fila > cantidadDuelo sqrt ceiling) ifTrue: [ fila := 1. columna := columna + 1 ].		((TableroLogico matrizTableroLógico at: fila column: columna) nombre = arg2 nombre) ifTrue: [			TableroLogico matrizTableroLógico at: fila column: columna put: arg1		].		fila := fila + 1.	].! !!Duelo class methodsFor: 'ManageJuego' stamp: '2/16/2025 13:28'!crearMorphimagen2|imagen directoryPath fileNames nombreimagen screenWidth screenHeight |screenWidth := World width.screenHeight := World height.directoryPath := FileSystem workingDirectory / 'assets/images'/(self temaDuelo)asString.fileNames := OrderedCollection new.directoryPath entries do: [:entry |    entry isDirectory ifFalse: [fileNames add: entry name]].nombreimagen := fileNames atRandom.imagen := Form fromFileNamed:                FileSystem workingDirectory                / 'assets/images'/((self temaDuelo))asString/nombreimagen. morphImagen ifNotNil: [ tableroDeDuelo removeMorph: morphImagen ].morphImagen := ImageMorph new.morphImagen        image: imagen;        position: ((tableroDeDuelo extent x // 2) - (morphImagen width // 2))  @ ((tableroDeDuelo extent y // 2) - (morphImagen height // 2))-100.tableroDeDuelo addMorph: morphImagen.fileNames remove: nombreimagen.listaNombres := fileNames.nombreDelaImagen := nombreimagen.self crearBotones.! !!Duelo class methodsFor: 'as yet unclassified' stamp: '2/16/2025 13:31'!dueloBotNPC: desafiantex desafiado: desafiadoxjugandocontrabot := true.self initialize.self jugadorActual: false. self dibujarDuelo.self crearMorphNombres: (desafiantex nombre asString) desafiadoNombre: (desafiadox nombre asString asString). self controlDeTiempos .self crearMorphTimmer: 10 timmer2: 10.self crearMorphsPuntos.self crearMorphimagen.! !!Duelo class methodsFor: 'as yet unclassified' stamp: '2/16/2025 13:53'!jugadaBot| listajugadas listanumeros |listajugadas := OrderedCollection new.  "Inicializamos listajugadas"listanumeros := OrderedCollection new.listanumeros add: 1 asNumber.listanumeros add: 2 asNumber.1 to: 5 do: [ :i |     listajugadas add: (listanumeros shuffled) first. "Agregamos un número aleatorio de listanumeros"].listajugadas add: 3.listajugadas inspect.1 to: 5 do: [:i| 	(listajugadas at: i) = 1 ifTrue:[self incrementarPuntosMorph1].	 ]! !Object subclass: #TableroLogico	instanceVariableNames: ''	classVariableNames: ''	package: 'TheConquist'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TableroLogico class	instanceVariableNames: 'MatrizDeTemas MatrizTableroLógico MatrizDeMorphs'!!TableroLogico class methodsFor: 'accessing' stamp: '1/25/2025 22:14'!matrizDeTemas	^ MatrizDeTemas! !!TableroLogico class methodsFor: 'accessing' stamp: '1/25/2025 22:14'!matrizDeTemas: anObject	MatrizDeTemas := anObject! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 12:34'!matrizTableroLógico	^ MatrizTableroLógico! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 12:34'!matrizTableroLógico: anObject	MatrizTableroLógico := anObject! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 17:11'!matrizDeMorphs	^ MatrizDeMorphs! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 17:11'!matrizDeMorphs: anObject	MatrizDeMorphs := anObject! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '2/9/2025 00:58'!crearMatrizMorphs: cantMorphs    | matrizMorphs filas columnas fila columna |    filas := cantMorphs sqrt ceiling.    columnas := cantMorphs sqrt ceiling.    matrizMorphs := Matrix rows: filas columns: columnas.    fila := 1.    columna := 1.    1 to: cantMorphs do: [:i |        | morphcasilla |        morphcasilla := Casilla new.        morphcasilla crearCasilla: fila and: columna label: (self matrizDeTemas at: fila column: columna).        matrizMorphs at: fila column: columna put: morphcasilla.        columna := columna + 1.        (columna > columnas) ifTrue: [            columna := 1.            fila := fila + 1.        ].    ].    self matrizDeMorphs: matrizMorphs.! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '2/15/2025 05:20'!crearMatrizTablero: cantJugadores NPCs: cantNPCs| matrizTablero fila columna cantNPClocal random booleanValue file contents elements jugador |file := FileSystem workingDirectory / 'assets' / 'nombresNPC.txt'.contents := file readStreamDo: [ :stream | stream contents ]."Divide el contenido del archivo en elementos usando '|' como delimitador"elements := contents substrings: '|'.elements := elements shuffled. "Mezclar los elementos"fila := 1.columna := 1.random := Random new.cantNPClocal := cantNPCs."La matriz tablero va a estar compuesta por el objeto jugadores, que contendrá en cada posición los datos del jugador, si es NPC o no, su tema y sus puntos"matrizTablero := Matrix rows: (cantJugadores sqrt ceiling) columns: (cantJugadores sqrt ceiling).1 to: cantJugadores do: [:i |    jugador := Jugador new.    (cantNPClocal > 0) ifTrue: [        cantNPClocal := cantNPClocal - 1.        jugador nombre: (UIManager default request: 'Por favor ingrese el nombre del participante').        jugador nPC: false.    ] ifFalse: [        jugador nombre: (elements atRandom).        jugador nPC: true.    ].    jugador puntosProbabilidad: 0.    jugador tema: (TableroLogico matrizDeTemas at: fila column: columna).    matrizTablero at: fila column: columna put: jugador.    (fila = matrizTablero rows) ifTrue: [        fila := 1.        columna := columna + 1.    ] ifFalse: [        fila := fila + 1.    ].].self matrizTableroLógico: matrizTablero.! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '1/25/2025 22:17'!crearMatrizTemas: cantJugadores| file contents elements matrix matrixSize |"Abre el archivo y lee su contenido"file := FileSystem workingDirectory / 'assets' / 'temas.txt'.contents := file readStreamDo: [ :stream | stream contents ]."Divide el contenido del archivo en elementos usando '|' como delimitador"elements := contents substrings: '|'.elements := elements shuffled."Crear la matriz"matrixSize := cantJugadores sqrt.matrix := Matrix rows: matrixSize columns: matrixSize."Recorrer los elementos y asignarlos a la matriz"1 to: (matrixSize * matrixSize) do: [:i |    | row col |    row := (i - 1) // matrixSize + 1.  "Calcula la fila"    col := (i - 1) \\ matrixSize + 1.   "Calcula la columna"    (i <= elements size) ifTrue: [        matrix at: row column: col put: (elements at: i).    ] ifFalse: [        matrix at: row column: col put: nil. "O algún valor por defecto"    ].].MatrizDeTemas := matrix.! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '1/31/2025 21:23'!dibujarTablero|Casilla fila columna|fila := 0.columna := 1.1 to: (Juego cantNPC) do:[:i|	fila := fila + 1.	Casilla := TableroLogico matrizDeMorphs at: fila column: columna.	(fila = (Juego cantNPC sqrt)) ifTrue: [fila := 1. columna := columna + 1].	Juego imagenMorph addMorph: Casilla.	Casilla position: (10*i)@(10*i).	]! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '1/31/2025 21:24'!dibujarTablero: imagenMorph|Casilla fila columna|fila := 0.columna := 1.1 to: (Juego cantNPC) do:[:i|	fila := fila + 1.	Casilla := TableroLogico matrizDeMorphs at: fila column: columna.	(fila = (Juego cantNPC sqrt)) ifTrue: [fila := 1. columna := columna + 1].	imagenMorph addMorph: Casilla.	Casilla position: (10*i)@(10*i).	]! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '2/9/2025 00:58'!dibujarTablero: imagenMorph cantNPC: cantNPC    | casilla fila columna maxFila maxColumna |    fila := 1.    columna := 1.    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.    1 to: cantNPC do: [:i |        casilla := (TableroLogico matrizDeMorphs at: fila column: columna) morph.        imagenMorph addMorph: casilla.        casilla position: ((columna - 1) * 120) @ ((fila - 1) * 120). "Ajusta la posición según sea necesario"        columna := columna + 1.        (columna > maxColumna) ifTrue: [            columna := 1.            fila := fila + 1.        ].    ].! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '2/15/2025 15:54'!obtenerJugadorTurnoActual| listaPrioridad prioridadMáxima fila columna jugadorDeMatriz |prioridadMáxima := 0.listaPrioridad := OrderedCollection new.fila := 1.columna := 1.1 to: Juego class cantNPC do: [ :i |    jugadorDeMatriz := (self matrizTableroLógico at: fila column: columna).    (jugadorDeMatriz puntosProbabilidad = prioridadMáxima) ifTrue: [         listaPrioridad add: jugadorDeMatriz     ].    (jugadorDeMatriz puntosProbabilidad > prioridadMáxima) ifTrue: [         listaPrioridad := OrderedCollection with: jugadorDeMatriz.        prioridadMáxima := jugadorDeMatriz puntosProbabilidad     ].    fila := fila + 1.    (fila > (Juego class cantNPC sqrt ceiling)) ifTrue: [         fila := 1.        columna := columna + 1     ].].jugadorDeMatriz := (listaPrioridad atRandom).^jugadorDeMatriz.! !!TableroLogico class methodsFor: 'CreaciónyManejodeMAtrices' stamp: '2/7/2025 15:21'!obtenerJugadorTurnoActual: CantNPC| listaPrioridad prioridadMáxima fila columna jugadorDeMatriz |prioridadMáxima := 0.listaPrioridad := OrderedCollection new.fila := 1.columna := 1.1 to: CantNPC do: [ :i |    jugadorDeMatriz := (self matrizTableroLógico at: fila column: columna).    (jugadorDeMatriz puntosProbabilidad = prioridadMáxima) ifTrue: [         listaPrioridad add: jugadorDeMatriz     ].    (jugadorDeMatriz puntosProbabilidad > prioridadMáxima) ifTrue: [         listaPrioridad := OrderedCollection with: jugadorDeMatriz.        prioridadMáxima := jugadorDeMatriz puntosProbabilidad     ].    fila := fila + 1.    (fila > (CantNPC sqrt ceiling)) ifTrue: [         fila := 1.        columna := columna + 1     ].].jugadorDeMatriz := (listaPrioridad atRandom).^jugadorDeMatriz.! !Object subclass: #Jugador	instanceVariableNames: 'Nombre Tema PuntosProbabilidad nPC'	classVariableNames: ''	package: 'TheConquist'!!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!nombre	^ Nombre! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!nombre: anObject	Nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!tema	^ Tema! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!tema: anObject	Tema := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!puntosProbabilidad	^ PuntosProbabilidad! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!puntosProbabilidad: anObject	PuntosProbabilidad := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:20'!nPC	^ nPC! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:20'!nPC: anObject	nPC := anObject! !!Jugador methodsFor: 'initialize' stamp: '2/7/2025 15:10'!initializeself puntosProbabilidad: 0.! !Object subclass: #Matrix	instanceVariableNames: 'rows cols data'	classVariableNames: ''	package: 'TheConquist'!!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:08'!rows         ^ rows    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:08'!rows: aNumber         rows := aNumber    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:09'!cols         ^ cols    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:09'!cols: aNumber         cols := aNumber    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!data         ^ data    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!data: anArray         data := anArray    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!at: rowIndex column: colIndex         ^ data at: (rowIndex - 1) * cols + colIndex    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!at: rowIndex column: colIndex put: value         data at: (rowIndex - 1) * cols + colIndex put: value    ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Matrix class	instanceVariableNames: ''!!Matrix class methodsFor: 'instance creation' stamp: '1/23/2025 07:11'!rows: rowsNumber columns: colsNumber         | instance |        instance := self new.        instance rows: rowsNumber.        instance cols: colsNumber.        instance data: (Array new: rowsNumber * colsNumber).        ^ instance   ! !Duelo initialize!