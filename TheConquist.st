Object subclass: #Casilla	instanceVariableNames: 'morph color tema filaCasilla columnaCasilla labelMorph'	classVariableNames: ''	package: 'TheConquist'!!Casilla methodsFor: 'as yet unclassified' stamp: '2/9/2025 01:39'!crearCasilla: x and: y label: label|buttonMorph labelMorph|filaCasilla:=x. columnaCasilla := y.buttonMorph := Morph new.buttonMorph bounds: (25@25 extent: 125@125).buttonMorph color: Color random.buttonMorph borderWidth: 2.buttonMorph borderColor: Color black.buttonMorph on: #mouseUp send: #botonClickeado to: self.labelMorph := StringMorph new.labelMorph contents: label.self tema: label.labelMorph position: (buttonMorph bounds center - (labelMorph extent / 2))."Agregar la etiqueta al botón"buttonMorph addMorph: labelMorph.self morph: buttonMorph.self morph: buttonMorph.! !!Casilla methodsFor: 'as yet unclassified' stamp: '2/9/2025 01:52'!botonClickeado||       self respuestaClick:( Juego jugadaVálida: (Juego cantNPCClase) nombreJugador: (Juego jugadordelTurnoActualClase ) labelMorph: self).! !!Casilla methodsFor: 'as yet unclassified' stamp: '2/9/2025 01:56'!respuestaClick: argumentoargumento ifTrue:[self SosElMismo: self] ifFalse: [ UIManager default inform: 'Movimiento no válido' ].! !!Casilla methodsFor: 'as yet unclassified' stamp: '2/9/2025 01:55'!SosElMismo: Casillalocal(Casillalocal tema) = (Juego jugadordelTurnoActualClase tema) ifTrue:[UIManager default inform: 'No puedes desafiarte a ti mismo...'] ifFalse: [ UIManager default inform:'Dueloo' ]! !!Casilla methodsFor: 'accessing' stamp: '1/24/2025 14:47'!morph	^ morph! !!Casilla methodsFor: 'accessing' stamp: '1/24/2025 14:47'!morph: anObject	morph := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!color	^ color! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!color: anObject	color := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!tema	^ tema! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 19:52'!tema: anObject	tema := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!filaCasilla	^ filaCasilla! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!filaCasilla: anObject	filaCasilla := anObject! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!columnaCasilla	^ columnaCasilla! !!Casilla methodsFor: 'accessing' stamp: '2/8/2025 22:04'!columnaCasilla: anObject	columnaCasilla := anObject! !Object subclass: #Juego	instanceVariableNames: 'CantNPC CantJugadores PantallaActual imagenMorph turnoActual jugadorActual'	classVariableNames: ''	package: 'TheConquist'!!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantNPC	^ CantNPC! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantNPC: anObject	CantNPC := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantJugadores	^ CantJugadores! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!cantJugadores: anObject	CantJugadores := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!pantallaActual	^ PantallaActual! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 19:35'!pantallaActual: anObject	PantallaActual := anObject! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 21:41'!imagenMorph	^ imagenMorph! !!Juego methodsFor: 'accessing' stamp: '1/21/2025 21:41'!imagenMorph: anObject	imagenMorph := anObject! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 14:17'!turnoActual ^turnoActual.! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 14:15'!turnoActual: anObject	turnoActual := anObject! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 15:29'!jugadorActual	^ jugadorActual! !!Juego methodsFor: 'accessing' stamp: '2/7/2025 15:29'!jugadorActual: anObject	jugadorActual := anObject! !!Juego methodsFor: 'initialization' stamp: '2/7/2025 14:12'!initializePantallaActual := 0.turnoActual := 0.! !!Juego methodsFor: 'ManageJuego' stamp: '1/23/2025 16:32'!borrarVentanasLabeledParticular SystemWindow allInstances do: [ :each |         (each label = 'TheConquist') ifTrue: [            each close. "Cierra la ventana"        ].    ].! !!Juego methodsFor: 'ManageJuego' stamp: '1/31/2025 22:05'!dibujarFondo    | imagen  boton1 boton2 |        "Cargar la imagen de fondo"    imagen := Form fromFileNamed: FileSystem workingDirectory / 'assets/backgrounds/background.png'.        "Crear ImageMorph para la imagen de fondo"    imagenMorph := ImageMorph new.    imagenMorph image: imagen.    imagenMorph position: 0@0. "Asegurarse de que la imagen de fondo esté en la esquina superior izquierda"        "Crear el botón 1"    boton1 := SimpleButtonMorph new.    boton1 label: 'Nuevo Juego'. "Definir el texto del botón"    boton1 target: self. "Definir el objetivo de la acción como la instancia actual"    boton1 actionSelector: #obtenerCantJugadores. "Definir el método a llamar cuando se presiona el botón"    boton1 extent: 150@50.    "Posicionar el botón 1 en el centro de la imagen"    boton1 position: (imagenMorph width // 2 - (boton1 width // 2)) @ (imagenMorph height // 2 - (boton1 height // 2) + 120).    "Crear el botón 2"    boton2 := SimpleButtonMorph new.    boton2 label: 'Salir'. "Definir el texto del botón"    boton2 target: self. "Definir el objetivo de la acción como la instancia actual"    boton2 actionSelector: #borrarVentanasLabeledParticular. "Definir el método a llamar cuando se presiona el botón"    boton2 extent: 120@50.    "Posicionar el botón 2 debajo del botón 1"    boton2 position: (imagenMorph width // 2 - (boton2 width // 2))  @ (imagenMorph height // 2 - (boton2 height // 2) + 220).        "Agregar los botones al ImageMorph"    imagenMorph addMorph: boton1.    imagenMorph addMorph: boton2.    "Abrir el ImageMorph en el mundo"    imagenMorph openInWindowLabeled: 'TheConquist'.! !!Juego methodsFor: 'ManageJuego' stamp: '2/7/2025 14:11'!dibujarFondoTablero    | imagen imagenMorph scrollPane ventanaExistente |    "Cargar la imagen de fondo"    imagen := Form fromFileNamed: FileSystem workingDirectory / 'assets/backgrounds/background-table.jpg'.    "Crear ImageMorph para la imagen de fondo"    imagenMorph := ImageMorph new.    imagenMorph image: imagen.    imagenMorph position: 0@0. "Asegurarse de que la imagen de fondo esté en la esquina superior izquierda"    "Crear un ScrollPane y agregar el ImageMorph"    scrollPane := ScrollPane new.    scrollPane scroller addMorph: imagenMorph.    scrollPane extent: (300@300). "Ajustar el tamaño del ScrollPane según sea necesario"    "Dibujar el tablero en el ImageMorph"    TableroLogico dibujarTablero: imagenMorph cantNPC: CantNPC.    "Cerrar cualquier ventana existente etiquetada 'TheConquist Board'"    ventanaExistente := SystemWindow allInstances detect: [ :each | each label = 'TheConquist' ] ifNone: [ nil ].    ventanaExistente ifNotNil: [ ventanaExistente close ].    "Abrir el ScrollPane en una ventana"    scrollPane openInWindowLabeled: 'TheConquist Board'.! !!Juego methodsFor: 'ManageJuego' stamp: '1/22/2025 05:28'!eliminarMorphsWorld submorphs "Selecciona a todos los submorphs y descide si es un ImageMorph para eliminarlo"        select: [ :morph | morph isKindOf: ImageMorph ]        thenDo: [ :morph | morph delete ].! !!Juego methodsFor: 'ManageJuego' stamp: '1/21/2025 22:43'!nuevoJuegoTranscript show: ['Nuevo juego'].! !!Juego methodsFor: 'ManageJuego' stamp: '2/9/2025 02:27'!obtenerCantJugadores    | flag MatrizTemas|    flag := false.    "Solicitar la cantidad de NPCs"    [ flag not ] whileTrue: [        CantNPC := (UIManager default request: '¿Cuántos participantes hay?') asNumber.        ((CantNPC sqrt isInteger))             ifTrue: [ flag := true ]            ifFalse: [ UIManager default inform: 'Valor inválido' ].    ].self class cantNPCClase: CantNPC.    "Solicitar la cantidad de jugadores humanos"    CantJugadores := (UIManager default request: '¿Cuántos participantes humanos habrá?') asNumber.MatrizTemas := TableroLogico crearMatrizTemas: CantNPC.TableroLogico crearMatrizTablero: CantNPC NPCs: CantJugadores.TableroLogico crearMatrizMorphs: CantNPC.TableroLogico inspect.self dibujarFondoTablero.self turnoActualmente.self obtenerJugadorActual.self esJugadorBot.! !!Juego methodsFor: 'ManageJuego' stamp: '2/9/2025 02:10'!obtenerJugadorActualself jugadorActual: (TableroLogico obtenerJugadorTurnoActual: self cantNPC).self class jugadordelTurnoActualClase: self jugadorActual.UIManager default inform: (('Jugador actual: '),  jugadorActual nombre,' ', 'Tema: ', jugadorActual tema).! !!Juego methodsFor: 'ManageJuego' stamp: '2/7/2025 14:17'!turnoActualmente(turnoActual = 0 ) ifTrue: [ UIManager default inform: 'Primer Turno...Buscando primer Jugador' ] ifFalse: [ UIManager default inform: ('Turno número ' turnoActual). ]! !!Juego methodsFor: 'as yet unclassified' stamp: '2/9/2025 03:18'!simularDuelo| listaDeFilasValidas maxFila maxColumna fila columna rival rivalfila rivalcolumna gana |    listaDeFilasValidas := OrderedCollection new.    maxFila := self cantNPC sqrt ceiling.    maxColumna := self cantNPC sqrt ceiling.    1 to: self cantNPC do: [ :i |        fila := (i - 1) // maxColumna + 1.        columna := (i - 1) \\ maxColumna + 1.        "Verifica si el tema del jugador coincide en la posición actual"        ((TableroLogico matrizDeTemas at: fila column: columna) = jugadorActual tema )ifTrue: [            "Agrega las posiciones válidas en base a la posición actual"(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = 1 and: columna = 1) ifTrue: [                listaDeFilasValidas add: 2@1.                listaDeFilasValidas add: 1@2.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = 1 and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: 1@(maxColumna - 1).                listaDeFilasValidas add: 2@maxColumna.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = maxFila and: columna = 1) ifTrue: [                listaDeFilasValidas add: (maxFila - 1)@1.                listaDeFilasValidas add: maxFila@2.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = maxFila and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: maxFila@(maxColumna - 1).                listaDeFilasValidas add: (maxFila - 1)@maxColumna.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = 1 and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: 1@(columna - 1).                listaDeFilasValidas add: 1@(columna + 1).                listaDeFilasValidas add: 2@columna.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (fila = maxFila and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: maxFila@(columna - 1).                listaDeFilasValidas add: maxFila@(columna + 1).                listaDeFilasValidas add: (maxFila - 1)@columna.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (columna = 1 and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@1.                listaDeFilasValidas add: (fila + 1)@1.                listaDeFilasValidas add: fila@2.            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            (columna = maxColumna and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@maxColumna.                listaDeFilasValidas add: (fila + 1)@maxColumna.                listaDeFilasValidas add: fila@(maxColumna - 1).            ].].(TableroLogico matrizDeTemas at: fila column: columna) = (jugadorActual tema) ifTrue:[            ((1 < fila and: fila < maxFila) and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@columna.                listaDeFilasValidas add: (fila + 1)@columna.                listaDeFilasValidas add: fila@(columna - 1).                listaDeFilasValidas add: fila@(columna + 1).            ].].        ].    ].listaDeFilasValidas inspect.listaDeFilasValidas := (listaDeFilasValidas atRandom).rivalfila := (listaDeFilasValidas) x.rivalcolumna := (listaDeFilasValidas) y.rival := TableroLogico matrizTableroLógico at: rivalfila column: rivalcolumna.(rival nPC) ifFalse: [ "Llama al duelo contra persona" ] ifTrue:[gana := (Random new next < 0.5).(gana) ifTrue: [ self ganaDesafiante: jugadorActual desafiado: rival] ifFalse: [ self ganaDesafiante: rival desafiado: jugadorActual]  ].self dibujarFondoTablero.TableroLogico matrizDeMorphs inspect.! !!Juego methodsFor: 'as yet unclassified' stamp: '2/9/2025 02:27'!esJugadorBot(self jugadorActual nPC) ifTrue: [ self simularDuelo ].! !!Juego methodsFor: 'as yet unclassified' stamp: '2/9/2025 03:17'!ganaDesafiante: desafiante desafiado: desafiado| fila columna remplazo |fila := 1.columna := 1.remplazo := nil.1 to: (self cantNPC sqrt ceiling) do: [:i |    (fila > self cantNPC sqrt ceiling) ifTrue: [ fila := 1. columna := columna + 1 ].    ((TableroLogico matrizDeMorphs at: fila column: columna) tema = desafiante tema) ifTrue: [ remplazo := (TableroLogico matrizDeMorphs at: fila column: columna) ].    fila := fila + 1.].fila := 1.columna := 1.1 to: (self cantNPC sqrt ceiling) do: [:i |    (fila > self cantNPC sqrt ceiling) ifTrue: [ fila := 1. columna := columna + 1 ].    ((TableroLogico matrizDeTemas at: fila column: columna) = desafiado tema) ifTrue: [        TableroLogico matrizDeTemas at: fila column: columna put: desafiante tema.        ((TableroLogico matrizDeMorphs at: fila column: columna) tema = desafiado tema) ifTrue: [            TableroLogico matrizDeTemas at: fila column: columna put: remplazo tema.        ].    ].    fila := fila + 1.].Transcript show: ('Ganó el: ', desafiante nombre).! !!Juego methodsFor: 'removing' stamp: '2/9/2025 03:14'!removeButtonMorphs    "Elimina todos los ButtonMorphs de la variable de instancia imagenMorph"    imagenMorph := nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: 'desafiante desafiado cantNPCClase jugadordelTurnoActualClase'!!Juego class methodsFor: 'as yet unclassified' stamp: '1/23/2025 09:56'!iniciar| instancia|instancia := self new. "Crea una instancia de Juego"instancia dibujarFondo. "Llama al método obtenerCantJug y devuelve su resultado"! !!Juego class methodsFor: 'as yet unclassified' stamp: '2/9/2025 01:46'!jugadaVálida: cantNPC nombreJugador: nombreJugador labelMorph: casilla    | fila columna listaDeFilasValidas listatema maxFila maxColumna |    listaDeFilasValidas := OrderedCollection new.    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.    1 to: cantNPC do: [ :i |        fila := (i - 1) // maxColumna + 1.        columna := (i - 1) \\ maxColumna + 1.        "Verifica si el tema del jugador coincide en la posición actual"        ((TableroLogico matrizDeTemas at: fila column: columna) = nombreJugador tema ) ifTrue: [            "Agrega las posiciones válidas en base a la posición actual"            (fila = 1 and: columna = 1) ifTrue: [                listaDeFilasValidas add: 2@1.                listaDeFilasValidas add: 1@2.            ].            (fila = 1 and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: 1@(maxColumna - 1).                listaDeFilasValidas add: 2@maxColumna.            ].            (fila = maxFila and: columna = 1) ifTrue: [                listaDeFilasValidas add: (maxFila - 1)@1.                listaDeFilasValidas add: maxFila@2.            ].            (fila = maxFila and: columna = maxColumna) ifTrue: [                listaDeFilasValidas add: maxFila@(maxColumna - 1).                listaDeFilasValidas add: (maxFila - 1)@maxColumna.            ].            (fila = 1 and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: 1@(columna - 1).                listaDeFilasValidas add: 1@(columna + 1).                listaDeFilasValidas add: 2@columna.            ].            (fila = maxFila and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: maxFila@(columna - 1).                listaDeFilasValidas add: maxFila@(columna + 1).                listaDeFilasValidas add: (maxFila - 1)@columna.            ].            (columna = 1 and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@1.                listaDeFilasValidas add: (fila + 1)@1.                listaDeFilasValidas add: fila@2.            ].            (columna = maxColumna and: (1 < fila and: fila < maxFila)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@maxColumna.                listaDeFilasValidas add: (fila + 1)@maxColumna.                listaDeFilasValidas add: fila@(maxColumna - 1).            ].            ((1 < fila and: fila < maxFila) and: (1 < columna and: columna < maxColumna)) ifTrue: [                listaDeFilasValidas add: (fila - 1)@columna.                listaDeFilasValidas add: (fila + 1)@columna.                listaDeFilasValidas add: fila@(columna - 1).                listaDeFilasValidas add: fila@(columna + 1).            ].        ].    ].    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.casilla inspect.listaDeFilasValidas inspect.(listaDeFilasValidas includes: ((casilla filaCasilla)@(casilla columnaCasilla)) )ifTrue: [^true] ifFalse: [ ^false]! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiante	^ desafiante! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiante: anObject	desafiante := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiado	^ desafiado! !!Juego class methodsFor: 'accessing' stamp: '2/7/2025 14:19'!desafiado: anObject	desafiado := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!cantNPCClase	^ cantNPCClase! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!cantNPCClase: anObject	cantNPCClase := anObject! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!jugadordelTurnoActualClase	^ jugadordelTurnoActualClase! !!Juego class methodsFor: 'accessing' stamp: '2/8/2025 19:33'!jugadordelTurnoActualClase: anObject	jugadordelTurnoActualClase := anObject! !Object subclass: #TableroLogico	instanceVariableNames: ''	classVariableNames: ''	package: 'TheConquist'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TableroLogico class	instanceVariableNames: 'MatrizDeTemas MatrizTableroLógico MatrizDeMorphs'!!TableroLogico class methodsFor: 'as yet unclassified' stamp: '1/25/2025 22:17'!crearMatrizTemas: cantJugadores| file contents elements matrix matrixSize |"Abre el archivo y lee su contenido"file := FileSystem workingDirectory / 'assets' / 'temas.txt'.contents := file readStreamDo: [ :stream | stream contents ]."Divide el contenido del archivo en elementos usando '|' como delimitador"elements := contents substrings: '|'.elements := elements shuffled."Crear la matriz"matrixSize := cantJugadores sqrt.matrix := Matrix rows: matrixSize columns: matrixSize."Recorrer los elementos y asignarlos a la matriz"1 to: (matrixSize * matrixSize) do: [:i |    | row col |    row := (i - 1) // matrixSize + 1.  "Calcula la fila"    col := (i - 1) \\ matrixSize + 1.   "Calcula la columna"    (i <= elements size) ifTrue: [        matrix at: row column: col put: (elements at: i).    ] ifFalse: [        matrix at: row column: col put: nil. "O algún valor por defecto"    ].].MatrizDeTemas := matrix.! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '1/27/2025 12:36'!crearMatrizTablero: cantJugadores NPCs: cantNPCs| matrizTablero fila columna cantNPClocal random booleanValue file contents elements jugador |file := FileSystem workingDirectory / 'assets' / 'nombresNPC.txt'.contents := file readStreamDo: [ :stream | stream contents ]."Divide el contenido del archivo en elementos usando '|' como delimitador"elements := contents substrings: '|'.elements := elements shuffled. "Mezclar los elementos"fila := 1.columna := 1.random := Random new.cantNPClocal := cantNPCs."La matriz tablero va a estar compuesta por el objeto jugadores, que contendrá en cada posición los datos del jugador, si es NPC o no, su tema y sus puntos"matrizTablero := Matrix rows: (cantJugadores sqrt ceiling) columns: (cantJugadores sqrt ceiling).1 to: cantJugadores do: [:i |    jugador := Jugador new.    (cantNPClocal > 0 and: [random next < 0.2]) ifTrue: [        cantNPClocal := cantNPClocal - 1.        jugador nombre: (UIManager default request: 'Por favor ingrese el nombre del participante').        jugador nPC: false.    ] ifFalse: [        jugador nombre: (elements atRandom).        jugador nPC: true.    ].    jugador puntosProbabilidad: 0.    jugador tema: (TableroLogico matrizDeTemas at: fila column: columna).    matrizTablero at: fila column: columna put: jugador.    (fila = matrizTablero rows) ifTrue: [        fila := 1.        columna := columna + 1.    ] ifFalse: [        fila := fila + 1.    ].].self matrizTableroLógico: matrizTablero.self inspect.! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '2/9/2025 00:58'!crearMatrizMorphs: cantMorphs    | matrizMorphs filas columnas fila columna |    filas := cantMorphs sqrt ceiling.    columnas := cantMorphs sqrt ceiling.    matrizMorphs := Matrix rows: filas columns: columnas.    fila := 1.    columna := 1.    1 to: cantMorphs do: [:i |        | morphcasilla |        morphcasilla := Casilla new.        morphcasilla crearCasilla: fila and: columna label: (self matrizDeTemas at: fila column: columna).        matrizMorphs at: fila column: columna put: morphcasilla.        columna := columna + 1.        (columna > columnas) ifTrue: [            columna := 1.            fila := fila + 1.        ].    ].    self matrizDeMorphs: matrizMorphs.! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '1/31/2025 21:23'!dibujarTablero|Casilla fila columna|fila := 0.columna := 1.1 to: (Juego cantNPC) do:[:i|	fila := fila + 1.	Casilla := TableroLogico matrizDeMorphs at: fila column: columna.	(fila = (Juego cantNPC sqrt)) ifTrue: [fila := 1. columna := columna + 1].	Juego imagenMorph addMorph: Casilla.	Casilla position: (10*i)@(10*i).	]! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '1/31/2025 21:24'!dibujarTablero: imagenMorph|Casilla fila columna|fila := 0.columna := 1.1 to: (Juego cantNPC) do:[:i|	fila := fila + 1.	Casilla := TableroLogico matrizDeMorphs at: fila column: columna.	(fila = (Juego cantNPC sqrt)) ifTrue: [fila := 1. columna := columna + 1].	imagenMorph addMorph: Casilla.	Casilla position: (10*i)@(10*i).	]! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '2/9/2025 00:58'!dibujarTablero: imagenMorph cantNPC: cantNPC    | casilla fila columna maxFila maxColumna |    fila := 1.    columna := 1.    maxFila := cantNPC sqrt ceiling.    maxColumna := cantNPC sqrt ceiling.    1 to: cantNPC do: [:i |        casilla := (TableroLogico matrizDeMorphs at: fila column: columna) morph.        imagenMorph addMorph: casilla.        casilla position: ((columna - 1) * 120) @ ((fila - 1) * 120). "Ajusta la posición según sea necesario"        columna := columna + 1.        (columna > maxColumna) ifTrue: [            columna := 1.            fila := fila + 1.        ].    ].! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '2/7/2025 15:23'!obtenerJugadorTurnoActual| listaPrioridad prioridadMáxima fila columna jugadorDeMatriz |prioridadMáxima := 0.listaPrioridad := OrderedCollection new.fila := 1.columna := 1.1 to: Juego class cantNPC do: [ :i |    jugadorDeMatriz := (self matrizTableroLógico at: fila column: columna).    (jugadorDeMatriz puntosProbabilidad = prioridadMáxima) ifTrue: [         listaPrioridad add: jugadorDeMatriz     ].    (jugadorDeMatriz puntosProbabilidad > prioridadMáxima) ifTrue: [         listaPrioridad := OrderedCollection with: jugadorDeMatriz.        prioridadMáxima := jugadorDeMatriz puntosProbabilidad     ].    fila := fila + 1.    (fila > (Juego class cantNPC sqrt ceiling)) ifTrue: [         fila := 1.        columna := columna + 1     ].].jugadorDeMatriz := (listaPrioridad atRandom).^jugadorDeMatriz.! !!TableroLogico class methodsFor: 'as yet unclassified' stamp: '2/7/2025 15:21'!obtenerJugadorTurnoActual: CantNPC| listaPrioridad prioridadMáxima fila columna jugadorDeMatriz |prioridadMáxima := 0.listaPrioridad := OrderedCollection new.fila := 1.columna := 1.1 to: CantNPC do: [ :i |    jugadorDeMatriz := (self matrizTableroLógico at: fila column: columna).    (jugadorDeMatriz puntosProbabilidad = prioridadMáxima) ifTrue: [         listaPrioridad add: jugadorDeMatriz     ].    (jugadorDeMatriz puntosProbabilidad > prioridadMáxima) ifTrue: [         listaPrioridad := OrderedCollection with: jugadorDeMatriz.        prioridadMáxima := jugadorDeMatriz puntosProbabilidad     ].    fila := fila + 1.    (fila > (CantNPC sqrt ceiling)) ifTrue: [         fila := 1.        columna := columna + 1     ].].jugadorDeMatriz := (listaPrioridad atRandom).^jugadorDeMatriz.! !!TableroLogico class methodsFor: 'accessing' stamp: '1/25/2025 22:14'!matrizDeTemas	^ MatrizDeTemas! !!TableroLogico class methodsFor: 'accessing' stamp: '1/25/2025 22:14'!matrizDeTemas: anObject	MatrizDeTemas := anObject! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 12:34'!matrizTableroLógico	^ MatrizTableroLógico! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 12:34'!matrizTableroLógico: anObject	MatrizTableroLógico := anObject! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 17:11'!matrizDeMorphs	^ MatrizDeMorphs! !!TableroLogico class methodsFor: 'accessing' stamp: '1/27/2025 17:11'!matrizDeMorphs: anObject	MatrizDeMorphs := anObject! !Object subclass: #Jugador	instanceVariableNames: 'Nombre Tema PuntosProbabilidad nPC'	classVariableNames: ''	package: 'TheConquist'!!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!nombre	^ Nombre! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!nombre: anObject	Nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!tema	^ Tema! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!tema: anObject	Tema := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!puntosProbabilidad	^ PuntosProbabilidad! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:19'!puntosProbabilidad: anObject	PuntosProbabilidad := anObject! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:20'!nPC	^ nPC! !!Jugador methodsFor: 'accessing' stamp: '1/26/2025 07:20'!nPC: anObject	nPC := anObject! !!Jugador methodsFor: 'initialize' stamp: '2/7/2025 15:10'!initializeself puntosProbabilidad: 0.! !Object subclass: #Matrix	instanceVariableNames: 'rows cols data'	classVariableNames: ''	package: 'TheConquist'!!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:08'!rows         ^ rows    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:08'!rows: aNumber         rows := aNumber    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:09'!cols         ^ cols    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:09'!cols: aNumber         cols := aNumber    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!data         ^ data    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!data: anArray         data := anArray    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!at: rowIndex column: colIndex         ^ data at: (rowIndex - 1) * cols + colIndex    ! !!Matrix methodsFor: 'accessing' stamp: '1/23/2025 07:10'!at: rowIndex column: colIndex put: value         data at: (rowIndex - 1) * cols + colIndex put: value    ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Matrix class	instanceVariableNames: ''!!Matrix class methodsFor: 'instance creation' stamp: '1/23/2025 07:11'!rows: rowsNumber columns: colsNumber         | instance |        instance := self new.        instance rows: rowsNumber.        instance cols: colsNumber.        instance data: (Array new: rowsNumber * colsNumber).        ^ instance   ! !